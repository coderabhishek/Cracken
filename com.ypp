%{
#include<iostream>
#include<algorithm>
#include<ostream>
#include<vector>
#include<set>
#include<map>
#include<string>
#include<string.h>
#include<stdlib.h>
#include<fstream>
#include<stdio.h>
#include<stack>
#include<stdlib.h>
#include<memory>

#include "util.cpp"
#include "gen_asm.cpp"

using namespace std;

//For debug
#define YYDEBUG 1
extern char *yytext;
extern int yylineno;
bool parser_failed = false;

void yyerror(string);
int yylex();
void yywrap();
#define max_tab_size 1000
int size[max_tab_size];
string declaration_type;
string struct_type;
bool func_bool = false;
%}

%union {char str[50]; struct code_segment* cs; struct param_list* pl; struct dimension_list* dl;}
%start program;
%token COL;
%token OP_PARENS;
%token CL_PARENS;
%token OP_BR;
%token CL_BR;
%token OP_SQBR;
%token CL_SQBR;
%token IF;
%token ELSE;
%token ELSEIF;
%token T_COL;
%token AMP;
%token WHILE;
%token EQ;
%token COMMA;
%token FOR;
%token STAR;
%token DIVIDE;
%token PLUS;
%token MINUS;
%token DEREF;
%token STRUCT;
%token RETURN;
%token <str> TYPE;
%token <str> COMPARATOR;
%token <str> IDENTIFIER;
%token <str> INT_VAL;
%token <str> CONST_STR;
%token <str> REAL_VAL; 
%type <str> constant;
%type <cs> expr; 
%type <cs> expr_l;
%type <cs> assignment;
%type <cs> prep;
%type <cs> lines;
%type <cs> line;
%type <str> specifier;
%type <cs> if_block;
%type <cs> loop_block;
%type <cs> var_list;
%type <cs> decl;
%type <str> place_holder;
%type <cs> func_call 
%type <cs> expr_ll;
%type <cs> IDENTIFIER_LIST;
%type < pl > param_list 
%type <str> param;
%type <cs> function;
%type <cs> return_stmt;
%type <cs> struct_def;
%type <cs> place_holder_list;
%type <cs> program;
%type <dl> dim_list;
%type <str> array;
%%

program : program line {
	$$->ic = string($1->ic) + string($2->ic);
	ir = $$->ic;

}| line {
	ir = $1->ic;	
} | program error 

//           6          5          4    3      2         1        0
function : IDENTIFIER IDENTIFIER OP_BR emp_f param_list CL_BR OP_PARENS prep lines CL_PARENS{
	$$ = $8;
	if(!coercible(string($1), $9->type))
		yyerror("Wrong return type!\n");
	$$->ic += $9->ic;
	$$->ic += "func end;\n";		
	sym_table.clear_scope();
	func_bool = false;
}

prep : {
	 if(types.find($<str>-6) == types.end())
		yyerror("Unknown type " + string($<str>-6) + ". ");
	func temp_f = func();
	temp_f.name = string($<str>-5);
	temp_f.r_type = string($<str>-6);
	int reg_num = 1;
		
	$$ = create();
	$$->type = $<str>-6;
	$$->ic = "begfunc " + string($<str>-5) + ";\n";
	for(auto el: ($<pl>-2)->v){
		temp_f.para_type_list.push_back(el.second);
		$$->ic += scoped_name(el.first) + " = " + "_s" + to_string(reg_num++) + ";#eq\n"; 	
	}	
	funcs.push_back(temp_f);
}


emp_f : {
      cur_scope++;      
}

param_list : param COMMA param_list{
	   $$ = $3;
	string name, type, given = $1;
	int i = 0;
	while(given[i]!=' ')
		type.push_back(given[i++]);
	i++;
	while(i<given.size())
		name.push_back(given[i++]);
		
	$$->v.push_back(make_pair(name, type));	
} | param {
	string name, type, given = $1;
	int i = 0;
	while(given[i]!=' ')
		type.push_back(given[i++]);
	i++;
	while(i<given.size())
		name.push_back(given[i++]);
		
	
	auto v = {make_pair(name, type)};
	$$ = new param_list();
	$$->v = v;

}

param : IDENTIFIER IDENTIFIER {
      strcpy($$, $1);
	strcat($$, " ");
	strcat($$, $2);     
	sym_table.set($2, $1); 
}



line : function {
     $$ = $1;      
}| decl COL{
     $$ = $1;
} | expr COL{
	$$ = $1;
} | if_block {
	$$ = $1;
} | loop_block {
	$$ = $1;
} | struct_def{
	$$ = $1;
} | assignment COL{
	$$ = $1;
} | return_stmt {
	$$ = $1;
} | func_call COL {
	$$ = $1;
}

func_call : IDENTIFIER OP_BR emp place_holder_list CL_BR {
	  string ts = $1; 
	  if(func_itr->para_type_list.end() != param_itr)
		yyerror("Too few parameters");
	  $$ = create();
	  $$->type = func_itr->r_type;
	  $$->ic = $4->ic;
	
	for(int i=0;i<func_itr->para_type_list.size();++i)
		$$->ic += "param _s" + to_string(i+2) + ";\n";	 
  $$->ic += string("lcall ") + string($1) + string(";\n");
	  func_itr = f_end_iterator.end();
	  param_itr = p_end_iterator.end();	
		f_name = "";

}

emp : {
    assert(f_name == "");
	f_name = $<str>-1;    
}

place_holder_list : expr{
		  assert(func_itr == f_end_iterator.end());
	assert(param_itr == p_end_iterator.end());	
	auto t_str = f_name;
	func_itr = find_if(funcs.begin(), funcs.end(), [t_str](func f) -> bool {f.name == t_str;});
	if(func_itr == funcs.end()){
		yyerror("No such function as " + t_str);
		return 0;
	}
	
	param_itr = func_itr->para_type_list.begin();
	if(!coercible(*param_itr, $1->type))
		yyerror("Arg type mismatched for arg " + to_string(param_itr - func_itr->para_type_list.begin()));
	$$ = create();
	$$->type = "void";
	$$->ic = "stack_vars;\n";
	$$->ic += $1->ic;
	$$->ic += "_s" + to_string( param_itr - func_itr->para_type_list.begin() + 1 ) + " = _t0;#eq\n";
	param_itr++;
} |  expr COMMA place_holder_list  {
	if(param_itr == func_itr->para_type_list.end())
		yyerror("Too many parameters");
	if(!coercible(*param_itr, $1->type))
		yyerror("Arg type mismatched for arg " + to_string(param_itr - func_itr->para_type_list.begin()));
	$$ = create();	
	$$->type = "void";
	$$->ic = $3->ic;
	$$->ic += $1->ic;
	$$->ic += "_s" + to_string( param_itr - func_itr->para_type_list.begin() + 1 ) + " = _t0;#eq\n";
	param_itr++;
}

return_stmt : RETURN expr COL {
    $$ = create();
	$$->type = $2->type;
	$$->ic = $2->ic;
	$$->ic += "return _t0;\n";
}

assignment : IDENTIFIER EQ expr  {
	   if(!coercible($3->type, find_type($1)))
		yyerror("Type mismatch!! Can't assign " + $3->type + " to " + find_type($1) + ".");
	$$ = create();	
	$$->type = "void";
	$$->ic = $3->ic;
	$$->ic += scoped_name(string($1)) + " = _t0;#eq\n"; 
} | array EQ array {
	$$ = create();
	auto arg1 = string($1), arg2 = string($3);
	string basic_type1, basic_type2, name1, name2;
	size_t i = arg1.find('#');
	for(int j = i+1;j!=arg1.size();++j)
		name1.push_back(arg1[j]);
	i = arg2.find('#');
	for(int j = i+1;j!=arg2.size();++j)
		name2.push_back(arg2[j]);

for(auto el: $1)
	{
		if(el == '_')
			break;
		else basic_type1.push_back(el);
	}
	for(auto el: $3)
	{
		if(el == '_')
			break;
		else basic_type2.push_back(el);
	}	
	if(basic_type1 != basic_type2)
		yyerror("Array type mismatch!!");
	string t1 = find_type(name1), t2 = find_type(name2);
	if(count(t1.begin(), t1.end(), '_') - count(arg1.begin(), arg1.end(), '_') != count(t2.begin(), t2.end(), '_') - count(arg2.begin(), arg2.end(), '_'))
		yyerror("Array dimensions mismatch!!");
	$$->type = "void";
	$$->ic = "_t0 = _t1";	
} | IDENTIFIER dim_list EQ expr {
	string subject($1);
	for(auto el: $2->v){
		subject.push_back('[');
		subject.append(el);
		subject.push_back(']');
	}
	string t = find_type(subject);
	if(!coercible(t, $4->type))
		yyerror("Type mismatch " + t + "  " + $4->type);
	$$ = create();
	$$->type = t;
	$$->ic = $4->ic;
	$$->ic += scoped_name(subject)  + " = _t0;#eq\n";
} 

/* | array EQ expr {
	$$ = create();
	cout<<"Array with expr is --> "<<$1<<"\n\n";
	string s($1);
	s.replace('_', "][");
}*/

array : IDENTIFIER dim_list {

if(!sym_table.find($1))
		yyerror(string($1) + " not found!!");

string type = find_type($1);
	string temp;
	for(int i = 0;type[i]!='_';++i)
		temp.push_back(type[i]);

for(auto el: $2->v)
		temp += "_" + el;
	int i =0;
	while(type[i]!='_')
		i++;
	i++;
	for(auto el: $2->v){
		if(!isdigit(el[0]))
			continue;
		string it = "";
		while(i<type.size() and isdigit(type[i]))
			it.push_back(type[i++]);
		i++;	
		if(!(i<type.size()) or stoi(el) >= stoi(it)){	
			yyerror("Inconsistent dimensions!!");	
			break;	
		}
	}
	if(i>=type.size())
		yyerror("Inconsistent dimensions!!");
	temp.push_back('#');
	temp.append($1);
	strcpy($$, temp.c_str());
} 

struct_def : STRUCT IDENTIFIER OP_PARENS struct_type_set var_list CL_PARENS COL {
	   //	   for(auto el: struct_sub_type){
//		cout<<el.first<<"   "<<el.second<<endl;
//	}	
//	cout<<"\n\n\n\n";
//	for(auto el: types){
//		cout<<el.first<<"   "<<el.second<<endl;
//	}
	$$ = create();
	$$->type = $2;
	$$->ic = "";
	assert(types.find($2) != types.end());
	struct_type.clear();
}

struct_type_set : /* empty */ {
		assert(struct_type == "");
	struct_type = $<str>-1;		
}

var_list : IDENTIFIER T_COL IDENTIFIER COL {
	 if(types.find($1) == types.end()){
		yyerror("Undefined type.");
	}
	else {
		struct_sub_type[struct_type + "." + string($3)] = $1; 
	}
	types.set(string($<str>-1), types.get(struct_type) + types.get($1));
}
| IDENTIFIER T_COL IDENTIFIER COL var_list {
	if(types.find($1) == types.end())
		yyerror("Undefined type.");
	else {
		struct_sub_type[struct_type + "." + string($3)] = $1; 
	}
	types.set(string($<str>-1), types.get(struct_type) + types.get($1));


}

if_block : IF OP_BR expr COMPARATOR expr  CL_BR if_scope_prod OP_PARENS lines CL_PARENS {
	 $$ = create();
	$$->type = $9->type;
	string l1 = get_label();
	$$->ic = $3->ic + "\n";
	$$->ic += "pusht0;\n";
	$$->ic += $5->ic;
	$$->ic += "popt0;\n"; 	
	$$->ic += "_t0 = _t1 " + string($4) + " _t0;#eop--" + string($4) + "\n"; 
	$$->ic += "ifz _t0 goto " + l1 + ";\n";
	$$->ic += $9->ic + "\n";
	$$->ic += l1  + ":\n";  
	sym_table.clear_scope();
} | IF OP_BR expr COMPARATOR expr  CL_BR if_scope_prod OP_PARENS lines CL_PARENS close_scope ELSE OP_PARENS lines CL_PARENS{
	 $$ = create();
	$$->type = $9->type;
	string l1 = get_label(), l2 = get_label();
	$$->ic = $3->ic + "\n";
	$$->ic += "_t1 = _t0;#eq\n";
	$$->ic += $5->ic;	
	$$->ic += "_t0 = _t1 " + string($4) + " _t0;#eop--" + string($4) + "\n"; 
	$$->ic += "ifz _t0 goto " + l1 + ";\n";
	$$->ic += $9->ic + "\n";
	$$->ic += "goto " + l2 + ";\n";
	$$->ic += l1  + ":\n"; 
	$$->ic += $14->ic;
	$$->ic += l2 + ":\n"; 
	sym_table.clear_scope();
} 

if_scope_prod : /* empty */ {
	      cur_scope++;	     
}

close_scope : /* empty */ {
	    sym_table.clear_scope();	    
	cur_scope++;
}
loop_block : WHILE OP_BR expr COMPARATOR expr CL_BR while_scope_prod OP_PARENS lines CL_PARENS {
	   $$ = create();
	$$->type = $9->type;
	string l1 = get_label(), l2 = get_label();

$$->ic = l2 + ":\n";
	$$->ic += $3->ic + "\n";
	$$->ic += "pusht0;\n";
	$$->ic += $5->ic;
	$$->ic += "popt0;\n";	
	$$->ic += "_t0 = _t1 " + string($4) + " _t0;#eop--" + string($4) + "\n"; 	
	$$->ic += "ifz _t0 goto " + l1 + ";\n";
	$$->ic += $9->ic + "\n";
	$$->ic += "goto " + l2 + ";\n";
	$$->ic += l1  + ":\n";  
	sym_table.clear_scope();
} | FOR OP_BR assignment COL expr COMPARATOR expr COL assignment CL_BR while_scope_prod OP_PARENS lines CL_PARENS {
	$$ = create();
	$$->type = "void";
	$$->ic = $3->ic;
	string l1 = get_label(), l2 = get_label();
	
	$$->ic += l2 + ":\n";
	$$->ic += $5->ic + "\n";
	$$->ic += "pusht0;\n";
	$$->ic += $7->ic;
	$$->ic += "popt0;\n";	
	$$->ic += "_t0 = _t1 " + string($6) + " _t0;#eop--" + string($6) + "\n"; 	
	$$->ic += "ifz _t0 goto " + l1 + ";\n";
	$$->ic += $13->ic + "\n";
	$$->ic += $9->ic + "\n";
	$$->ic += "goto " + l2 + ";\n";
	$$->ic += l1  + ":\n";  
	sym_table.clear_scope();	
	
}

while_scope_prod : /* empty */ {
		 cur_scope++;		 
}

lines : line lines{
      $$ = create();
	if($1->type == "void" and $2->type!="void")
		$$->type = $2->type;
	else if($2->type == "void" and $1->type!="void")
		$$->type = $1->type;
	else if(!coercible($2->type, $1->type))
		yyerror("Return type mismatch!! " + string($1->type) + " and " + string($2->type) + ".");	
	else $$->type = $1->type;

$$->ic = $1->ic +"\n" + $2->ic; 
} | /* empty */ {
	$$ = create();
	$$->type = "void";
	$$->ic = "";
}  

decl : IDENTIFIER T_COL decl_type IDENTIFIER_LIST {
     if(types.find($1) == types.end())
		yyerror("Undefined type.");   
	$$ = $4;
	declaration_type.clear();
}

decl_type : /* empty */ {
	  assert(declaration_type.empty());
	declaration_type = string($<str>0);	  
}

specifier : DEREF {
	  strcpy($$, "^");	  
}


/*Not done */
IDENTIFIER_LIST : IDENTIFIER_LIST COMMA specifier IDENTIFIER EQ expr {
		if($6->type != "p_" + declaration_type)
		yyerror("Type mismatched " + $6->type + "   " + "p_" + declaration_type);		
	sym_table.set($4, "p_" + declaration_type);
	$$ = create();
	$$->type = "p_" + declaration_type;
	$$->ic = $6->ic;
	$$->ic += scoped_name(string($4)) + " = _t0;#eq\n";
	$$->ic += $1->ic + "\n"; 
}| IDENTIFIER_LIST COMMA specifier IDENTIFIER{
	sym_table.set($4, "p_" + declaration_type);
	$$ = create();
	$$->type = "p_" + declaration_type;
	$$->ic = scoped_name(string($4)) +  " = 0;#eq\n";
	$$->ic += $1->ic + "\n";	
}  |specifier IDENTIFIER EQ expr{
	if(!coercible($4->type, "p_" + declaration_type))
		yyerror("Type mismatched " + $4->type + "   " + "p_" + declaration_type);		
	sym_table.set($2, "p_" + declaration_type);
	$$ = create();
	$$->type = "p_" + declaration_type;
	$$->ic = $4->ic;
	$$->ic += scoped_name(string($2)) + " = _t0;#eq\n";
} |specifier IDENTIFIER { sym_table.set($2, "p_" + declaration_type);
	$$ = create();
	$$->type = "p_" + declaration_type;
	$$->ic = scoped_name(string($2)) + " = 0;#eq\n";
} | IDENTIFIER_LIST COMMA IDENTIFIER EQ expr {
	if($5->type != declaration_type)
		yyerror("Type mismatched " + $5->type + "   " + declaration_type);		
	sym_table.set($3, declaration_type);
	$$ = create();
	$$->type = declaration_type;
	$$->ic = $5->ic;
	$$->ic += scoped_name(string($3)) + " = _t0;#eq\n";
	$$->ic += $1->ic + "\n"; 
}| IDENTIFIER_LIST COMMA IDENTIFIER {
	sym_table.set($3, declaration_type);
	$$ = create();
	$$->type = declaration_type;
	$$->ic = scoped_name(string($3)) +  " = 0;#eq\n";
	$$->ic += $1->ic + "\n";	
}  |IDENTIFIER EQ expr{
	if(!coercible($3->type, declaration_type))
		yyerror("Type mismatched " + $3->type + "   " + declaration_type);		
	sym_table.set($1, declaration_type);
	$$ = create();
	$$->type = declaration_type;
	$$->ic = $3->ic;
	$$->ic += scoped_name(string($1)) + " = _t0;#eq\n";
} | IDENTIFIER { sym_table.set($1, declaration_type);
	$$ = create();
	$$->type = declaration_type;
	$$->ic = scoped_name(string($1)) + " = 0;#eq\n";
}|IDENTIFIER_LIST COMMA  IDENTIFIER dim_list {
	$$ = create();
	string temp = "";
	for(auto el: $4->v){
		temp += "_" + el;
	}
	sym_table.set($3, string(declaration_type) + temp);
	$$->type = declaration_type;
	int t_size=1;
	string ch = declaration_type;
	for(auto el: $4->v){
		t_size *= stoi(el);
		ch += "_" + el; 
	}	
//	$$->ic = "alloc " + scoped_name(string($3)) + "  " + to_string(t_size*types[$$->type]) + ";\n";
	addr_table[scoped_name($3)] = t_size*types.get($$->type);	
	types.set(ch, t_size*types.get($$->type)); 
	$$->ic += $1->ic;
} | IDENTIFIER dim_list {
		$$ = create();
	string temp = "";
	for(auto el: $2->v){
		temp += "_" + el;
	}
	sym_table.set($1, string(declaration_type) + temp);
	$$->type = declaration_type;
	int t_size=1;
	string ch = declaration_type;
	for(auto el: $2->v){
		t_size *= stoi(el);
		ch += "_" + el; 
	}
//	$$->ic = "alloc " + scoped_name(string($1)) + "  " + to_string(t_size*types[$$->type]) + ";\n";
	addr_table[scoped_name($1)] = t_size*types.get($$->type);
	
	types.set(ch, t_size*types.get($$->type)); 
}

dim_list : dim_list OP_SQBR place_holder CL_SQBR {
	 $$ = $1;
	string s;
	if(!isdigit($3[0]))
		s = scoped_name($3);
	else s = string($3);
	$$->v.push_back(s);		
}| OP_SQBR place_holder CL_SQBR {
	$$ = new dimension_list();
	string s;
	if(!isdigit($2[0]))
		s = scoped_name($2);
	else s = string($2);
	$$->v.push_back(s); 
}


place_holder : IDENTIFIER {
	     //	     int i = strlen($1);
//	     $1[i] = '_';
//	     $1[i+1] = '\0';
//	     char t[10];
//		snprintf(t, 10, "%d", cur_scope);
//		strcat($1, t);
//		cout<<"|||"<<$1<<"||||\n\n";
	     strcpy($$, $1);
}| constant{
	strcpy($$, $1);
} | AMP IDENTIFIER {
	strcpy($$, "&");
	strcat($$, $2);
} | DEREF IDENTIFIER {
	strcpy($$, "^");
	strcat($$, $2);
} | IDENTIFIER dim_list {
	strcpy($$, $1);
	for(auto el: $2->v){
		strcat($$, "[");
		strcat($$, el.c_str());
		strcat($$, "]");
	}
} 
/*   --- ND --- */

expr: expr PLUS expr_l {
	$$ = create();
	if(!coercible($1->type, $3->type))
		yyerror("Type Mismatch!!");
	$$->type = $1->type;
	string temp = $1->ic + "\n";
	temp += "pusht0\n";
	temp += $3->ic + "\n";
	temp += "popt0\n";
	temp += "_t0 = _t1 + _t0;   #eop--+\n";
	$$->ic = temp;
}| expr MINUS expr_l {
	$$ = create();
	if(!coercible($1->type, $3->type))
		yyerror("Type Mismatch!!");
	$$->type = $1->type;
	string temp = $1->ic + "\n";
	temp += "pusht0\n";
	temp += $3->ic + "\n";
	temp += "popt0\n";
	temp += "_t0 = _t1 - _t0;  #eop---\n";
	$$->ic = temp;
}| expr_l {
	$$ = create();
	$$->type = $1->type;
	string temp = $1->ic + "\n";
	$$->ic = temp;
}  

expr_l : expr_l STAR expr_ll {
       cout<<"YAYTYYYYYY\n";
	$$ = create();
	if(!coercible($1->type, $3->type))
		yyerror("Type Mismatch!!");
	$$->type = $1->type;
	string temp = $1->ic + "\n";
	temp += "pusht0\n";
	temp += $3->ic + "\n";
	temp += "popt0\n";
	temp += "_t0 = _t1 * _t0;  #eop--*\n";
	$$->ic = temp;
}| expr_l DIVIDE expr_ll {
	$$ = create();
	if(!coercible($1->type, $3->type))
		yyerror("Type Mismatch!!");
	$$->type = $1->type;
	string temp = $1->ic + "\n";
	temp += "pusht0\n";
	temp += $3->ic + "\n";
	temp += "popt0\n";
	temp += "_t0 = _t1 / _t0;  #eop--/\n";
	$$->ic = temp;
}| expr_ll  {
	$$ = $1;
}

expr_ll : place_holder {
	$$ = create();
	$$->type = find_type($1);
	if(isdigit($1[0]) || $1[0]=='\'')
	$$->ic = "_t0 = " + string($1) + ";#eq\n";
	else $$->ic = "_t0 = " + scoped_name(string($1)) + ";#eq\n";
} | func_call {
	$$ = create();
	$$->type = $1->type;
	$$->ic += $1->ic;
	$$->ic += "_t0 = _t7;#eq\n";
} | OP_BR expr CL_BR {
	$$ = create();
	$$->type = $2->type;
	string temp = $2->ic + "\n";
	$$->ic = temp;
} 




/*| OP_PARENS expr CL_PARENS {
}| expr PLUS sub_expr {
}| expr MINUS sub_expr | IDENTIFIER EQ expr | expr COMMA expr  */

/*sub_expr : place_holder STAR place_holder | place_holder DIVIDE place_holder | expr*/ 

constant : REAL_VAL {
	 strcpy($$, $1);		 
}| INT_VAL {
strcpy($$, $1);		 
}| CONST_STR {
strcpy($$, $1);		 
}
%%
int main(int argc, char *argv[]){
//	yydebug = 1;
if(argc < 2){
		cout<<"\e[0;31mNO FILE\n";
		return 0;
	}
	string file_name(argv[1]);
	freopen(file_name.c_str(),"r",stdin);
	if(file_name.find(".") != string::npos){
	while(*(file_name.end()-1)!='.')
		file_name.pop_back();
	file_name.pop_back();
	}
	cout<<"Compiling file "<<file_name<<endl;
	ofstream asm_file, ir_file; 
	global_addr = 0;	
	yyparse();
	if(parser_failed)
		cout<<"\n\e[0;31mCompilation failed!!\n";
	else {
			
		asm_file.open(file_name + ".asm");
		ir_file.open(file_name + ".ir");	
		string mips_asm = gen_assembly(ir);
		asm_file<<mips_asm;
		ir_file<<ir;
		cout<<"\n\033[0;34mCompiled Successfully!!\033[0m\n";
		sym_table.render();
		cout<<"\n\nAll variables according to sizes:\n";
		for(auto el: addr_table){
			cout<<el.first<<"     "<<el.second<<endl;
		}

	cout<<"Struct sub types:\n";
	for(auto el: struct_sub_type)
		cout<<el.first<<"   "<<el.second<<endl; 

}
return 0;
}
void yywrap(void) {
	return;
}

void yyerror(string s){
	parser_failed = true;
	cout<<"Error near line "<<yylineno<<" Token->  "<<yytext<<"\n"<<s<<"\n\n";
}
